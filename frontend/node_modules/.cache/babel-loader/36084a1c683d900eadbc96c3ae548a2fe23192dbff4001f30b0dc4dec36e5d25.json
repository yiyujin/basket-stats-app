{"ast":null,"code":"var _jsxFileName = \"/Users/yujinyi/Desktop/basket-stats-app/frontend/src/components/VideoRecorder.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoRecorder = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [videoURL, setVideoURL] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const chunksRef = useRef([]);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      streamRef.current = stream;\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, {\n          type: \"video/webm\"\n        });\n        setVideoURL(URL.createObjectURL(blob));\n      };\n      mediaRecorder.start();\n      setRecording(true);\n    } catch (error) {\n      console.error(\"Error accessing media devices:\", error);\n    }\n  };\n  const stopRecording = () => {\n    var _mediaRecorderRef$cur, _streamRef$current;\n    (_mediaRecorderRef$cur = mediaRecorderRef.current) === null || _mediaRecorderRef$cur === void 0 ? void 0 : _mediaRecorderRef$cur.stop();\n    (_streamRef$current = streamRef.current) === null || _streamRef$current === void 0 ? void 0 : _streamRef$current.getTracks().forEach(track => track.stop());\n    setRecording(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      disabled: recording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      disabled: !recording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), videoURL && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Recorded Video:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        src: videoURL,\n        controls: true,\n        width: \"400\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoRecorder, \"D4FCJwwIKy6cTj/GugzSLig/xAw=\");\n_c = VideoRecorder;\nexport default VideoRecorder;\nvar _c;\n$RefreshReg$(_c, \"VideoRecorder\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","VideoRecorder","_s","recording","setRecording","videoURL","setVideoURL","mediaRecorderRef","streamRef","chunksRef","startRecording","stream","navigator","mediaDevices","getUserMedia","video","current","mediaRecorder","MediaRecorder","ondataavailable","event","data","size","push","onstop","blob","Blob","type","URL","createObjectURL","start","error","console","stopRecording","_mediaRecorderRef$cur","_streamRef$current","stop","getTracks","forEach","track","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","src","controls","width","_c","$RefreshReg$"],"sources":["/Users/yujinyi/Desktop/basket-stats-app/frontend/src/components/VideoRecorder.js"],"sourcesContent":["import { useState, useRef } from \"react\";\n\nconst VideoRecorder = () => {\n  const [recording, setRecording] = useState(false);\n  const [videoURL, setVideoURL] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const chunksRef = useRef([]);\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      streamRef.current = stream;\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, { type: \"video/webm\" });\n        setVideoURL(URL.createObjectURL(blob));\n      };\n\n      mediaRecorder.start();\n      setRecording(true);\n    } catch (error) {\n      console.error(\"Error accessing media devices:\", error);\n    }\n  };\n\n  const stopRecording = () => {\n    mediaRecorderRef.current?.stop();\n    streamRef.current?.getTracks().forEach((track) => track.stop());\n    setRecording(false);\n  };\n\n  return (\n    <div>\n      <button onClick={startRecording} disabled={recording}>\n        Start Recording\n      </button>\n      <button onClick={stopRecording} disabled={!recording}>\n        Stop Recording\n      </button>\n\n      {videoURL && (\n        <div>\n          <h3>Recorded Video:</h3>\n          <video src={videoURL} controls width=\"400\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default VideoRecorder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}