{"ast":null,"code":"var _jsxFileName = \"/Users/yujinyi/Desktop/basket-stats-app/frontend/src/components/VideoRecorder.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoRecorder = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [videoURL, setVideoURL] = useState(null);\n  const [blobData, setBlobData] = useState(null);\n  const [duration, setDuration] = useState(0);\n  const [uploading, setUploading] = useState(false);\n  const [uploadedVideoUrl, setUploadedVideoUrl] = useState(null);\n  const [error, setError] = useState(null);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const chunksRef = useRef([]);\n  const timerRef = useRef(null);\n\n  // Function to test AWS connection\n  const testAWS = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/check-aws\");\n      const data = await response.json();\n      alert(JSON.stringify(data, null, 2));\n    } catch (err) {\n      alert(\"Error testing AWS: \" + err.message);\n    }\n  };\n\n  // Test server connection\n  const testServer = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/test\");\n      const data = await response.json();\n      alert(JSON.stringify(data, null, 2));\n    } catch (err) {\n      alert(\"Error connecting to server: \" + err.message);\n    }\n  };\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      streamRef.current = stream;\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, {\n          type: \"video/webm\"\n        });\n        setVideoURL(URL.createObjectURL(blob));\n        setBlobData(blob);\n        clearInterval(timerRef.current);\n      };\n      mediaRecorder.start(1000);\n      setRecording(true);\n      setDuration(0);\n      timerRef.current = setInterval(() => {\n        setDuration(prev => prev + 1);\n      }, 1000);\n    } catch (error) {\n      setError(`Camera access error: ${error.message}`);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n      var _streamRef$current;\n      mediaRecorderRef.current.stop();\n      (_streamRef$current = streamRef.current) === null || _streamRef$current === void 0 ? void 0 : _streamRef$current.getTracks().forEach(track => track.stop());\n      setRecording(false);\n      clearInterval(timerRef.current);\n    }\n  };\n  const uploadToServer = async () => {\n    if (!blobData) {\n      setError(\"No video recorded yet!\");\n      return;\n    }\n    try {\n      setUploading(true);\n      setError(null);\n\n      // Create form data\n      const formData = new FormData();\n      formData.append('video', blobData, 'recording.webm');\n      console.log(\"Uploading file of size:\", blobData.size);\n\n      // Upload to backend\n      const response = await fetch(\"http://localhost:8000/upload-video\", {\n        method: \"POST\",\n        body: formData\n      });\n      const responseText = await response.text();\n      console.log(\"Server response text:\", responseText);\n      let jsonData;\n      try {\n        jsonData = JSON.parse(responseText);\n      } catch (e) {\n        throw new Error(`Invalid JSON response: ${responseText}`);\n      }\n      if (!response.ok) {\n        throw new Error(jsonData.error || jsonData.details || `Server error: ${response.status}`);\n      }\n      setUploadedVideoUrl(jsonData.fileUrl);\n      alert(\"Video uploaded successfully!\");\n    } catch (error) {\n      console.error(\"Error during upload:\", error);\n      setError(`Upload failed: ${error.message}`);\n    } finally {\n      setUploading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-2 py-1 bg-blue-500 text-white rounded mr-2\",\n        onClick: testServer,\n        children: \"Test Server Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-2 py-1 bg-green-500 text-white rounded\",\n        onClick: testAWS,\n        children: \"Test AWS Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2 mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-4 py-2 rounded bg-blue-500 text-white disabled:bg-gray-300\",\n        onClick: startRecording,\n        disabled: recording,\n        children: \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-4 py-2 rounded bg-red-500 text-white disabled:bg-gray-300\",\n        onClick: stopRecording,\n        disabled: !recording,\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-4 py-2 rounded bg-green-500 text-white disabled:bg-gray-300\",\n        onClick: uploadToServer,\n        disabled: !videoURL || uploading,\n        children: uploading ? \"Uploading...\" : \"Upload Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-100 border border-red-400 text-red-700 p-2 rounded mb-4\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-100 p-4 rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: recording ? `Recording... ${duration}s` : \"Recorded Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aspect-video bg-black\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          autoPlay: true,\n          playsInline: true,\n          muted: true,\n          width: \"100%\",\n          style: {\n            display: videoURL ? 'none' : 'block'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), videoURL && /*#__PURE__*/_jsxDEV(\"video\", {\n          src: videoURL,\n          controls: true,\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), uploadedVideoUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold mb-2\",\n          children: \"Uploaded Video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600 mb-2 break-all\",\n          children: uploadedVideoUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: uploadedVideoUrl,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"text-blue-500 underline\",\n          children: \"View uploaded video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoRecorder, \"vDqt05DX2sxADtDLMEXwqTBRynQ=\");\n_c = VideoRecorder;\nexport default VideoRecorder;\nvar _c;\n$RefreshReg$(_c, \"VideoRecorder\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","VideoRecorder","_s","recording","setRecording","videoURL","setVideoURL","blobData","setBlobData","duration","setDuration","uploading","setUploading","uploadedVideoUrl","setUploadedVideoUrl","error","setError","videoRef","mediaRecorderRef","streamRef","chunksRef","timerRef","testAWS","response","fetch","data","json","alert","JSON","stringify","err","message","testServer","startRecording","stream","navigator","mediaDevices","getUserMedia","video","audio","current","srcObject","mediaRecorder","MediaRecorder","ondataavailable","event","size","push","onstop","blob","Blob","type","URL","createObjectURL","clearInterval","start","setInterval","prev","stopRecording","state","_streamRef$current","stop","getTracks","forEach","track","uploadToServer","formData","FormData","append","console","log","method","body","responseText","text","jsonData","parse","e","Error","ok","details","status","fileUrl","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","disabled","ref","autoPlay","playsInline","muted","width","style","display","src","controls","href","target","rel","_c","$RefreshReg$"],"sources":["/Users/yujinyi/Desktop/basket-stats-app/frontend/src/components/VideoRecorder.js"],"sourcesContent":["import { useState, useRef } from \"react\";\n\nconst VideoRecorder = () => {\n  const [recording, setRecording] = useState(false);\n  const [videoURL, setVideoURL] = useState(null);\n  const [blobData, setBlobData] = useState(null);\n  const [duration, setDuration] = useState(0);\n  const [uploading, setUploading] = useState(false);\n  const [uploadedVideoUrl, setUploadedVideoUrl] = useState(null);\n  const [error, setError] = useState(null);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const chunksRef = useRef([]);\n  const timerRef = useRef(null);\n\n  // Function to test AWS connection\n  const testAWS = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/check-aws\");\n      const data = await response.json();\n      alert(JSON.stringify(data, null, 2));\n    } catch (err) {\n      alert(\"Error testing AWS: \" + err.message);\n    }\n  };\n\n  // Test server connection\n  const testServer = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/test\");\n      const data = await response.json();\n      alert(JSON.stringify(data, null, 2));\n    } catch (err) {\n      alert(\"Error connecting to server: \" + err.message);\n    }\n  };\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        video: true,\n        audio: true\n      });\n      streamRef.current = stream;\n\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, { type: \"video/webm\" });\n        setVideoURL(URL.createObjectURL(blob));\n        setBlobData(blob);\n        clearInterval(timerRef.current);\n      };\n\n      mediaRecorder.start(1000);\n      setRecording(true);\n\n      setDuration(0);\n      timerRef.current = setInterval(() => {\n        setDuration((prev) => prev + 1);\n      }, 1000);\n    } catch (error) {\n      setError(`Camera access error: ${error.message}`);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n      mediaRecorderRef.current.stop();\n      streamRef.current?.getTracks().forEach((track) => track.stop());\n      setRecording(false);\n      clearInterval(timerRef.current);\n    }\n  };\n\n  const uploadToServer = async () => {\n    if (!blobData) {\n      setError(\"No video recorded yet!\");\n      return;\n    }\n\n    try {\n      setUploading(true);\n      setError(null);\n      \n      // Create form data\n      const formData = new FormData();\n      formData.append('video', blobData, 'recording.webm');\n      \n      console.log(\"Uploading file of size:\", blobData.size);\n      \n      // Upload to backend\n      const response = await fetch(\"http://localhost:8000/upload-video\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      const responseText = await response.text();\n      console.log(\"Server response text:\", responseText);\n      \n      let jsonData;\n      try {\n        jsonData = JSON.parse(responseText);\n      } catch (e) {\n        throw new Error(`Invalid JSON response: ${responseText}`);\n      }\n\n      if (!response.ok) {\n        throw new Error(jsonData.error || jsonData.details || `Server error: ${response.status}`);\n      }\n\n      setUploadedVideoUrl(jsonData.fileUrl);\n      alert(\"Video uploaded successfully!\");\n    } catch (error) {\n      console.error(\"Error during upload:\", error);\n      setError(`Upload failed: ${error.message}`);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"mb-2\">\n        <button \n          className=\"px-2 py-1 bg-blue-500 text-white rounded mr-2\"\n          onClick={testServer}>\n          Test Server Connection\n        </button>\n        <button \n          className=\"px-2 py-1 bg-green-500 text-white rounded\"\n          onClick={testAWS}>\n          Test AWS Connection\n        </button>\n      </div>\n\n      <div className=\"flex gap-2 mb-4\">\n        <button \n          className=\"px-4 py-2 rounded bg-blue-500 text-white disabled:bg-gray-300\"\n          onClick={startRecording} \n          disabled={recording}>\n          Start Recording\n        </button>\n        <button \n          className=\"px-4 py-2 rounded bg-red-500 text-white disabled:bg-gray-300\"\n          onClick={stopRecording} \n          disabled={!recording}>\n          Stop Recording\n        </button>\n        <button \n          className=\"px-4 py-2 rounded bg-green-500 text-white disabled:bg-gray-300\"\n          onClick={uploadToServer} \n          disabled={!videoURL || uploading}>\n          {uploading ? \"Uploading...\" : \"Upload Video\"}\n        </button>\n      </div>\n\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 p-2 rounded mb-4\">\n          {error}\n        </div>\n      )}\n\n      <div className=\"bg-gray-100 p-4 rounded\">\n        <h3 className=\"text-lg font-semibold mb-2\">\n          {recording ? `Recording... ${duration}s` : \"Recorded Video\"}\n        </h3>\n        <div className=\"aspect-video bg-black\">\n          <video \n            ref={videoRef} \n            autoPlay \n            playsInline \n            muted\n            width=\"100%\" \n            style={{ display: videoURL ? 'none' : 'block' }} \n          />\n          {videoURL && \n            <video \n              src={videoURL} \n              controls \n              width=\"100%\" \n            />\n          }\n        </div>\n\n        {uploadedVideoUrl && (\n          <div className=\"mt-4\">\n            <h3 className=\"text-lg font-semibold mb-2\">Uploaded Video</h3>\n            <p className=\"text-sm text-gray-600 mb-2 break-all\">{uploadedVideoUrl}</p>\n            <a \n              href={uploadedVideoUrl} \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-blue-500 underline\"\n            >\n              View uploaded video\n            </a>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default VideoRecorder;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMoB,QAAQ,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMoB,gBAAgB,GAAGpB,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMqB,SAAS,GAAGrB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMsB,SAAS,GAAGtB,MAAM,CAAC,EAAE,CAAC;EAC5B,MAAMuB,QAAQ,GAAGvB,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACA,MAAMwB,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;MAC/D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCC,KAAK,CAACC,IAAI,CAACC,SAAS,CAACJ,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZH,KAAK,CAAC,qBAAqB,GAAGG,GAAG,CAACC,OAAO,CAAC;IAC5C;EACF,CAAC;;EAED;EACA,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,CAAC;MAC1D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCC,KAAK,CAACC,IAAI,CAACC,SAAS,CAACJ,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZH,KAAK,CAAC,8BAA8B,GAAGG,GAAG,CAACC,OAAO,CAAC;IACrD;EACF,CAAC;EAED,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QACvDC,KAAK,EAAE,IAAI;QACXC,KAAK,EAAE;MACT,CAAC,CAAC;MACFpB,SAAS,CAACqB,OAAO,GAAGN,MAAM;MAE1B,IAAIjB,QAAQ,CAACuB,OAAO,EAAE;QACpBvB,QAAQ,CAACuB,OAAO,CAACC,SAAS,GAAGP,MAAM;MACrC;MAEA,MAAMQ,aAAa,GAAG,IAAIC,aAAa,CAACT,MAAM,CAAC;MAC/ChB,gBAAgB,CAACsB,OAAO,GAAGE,aAAa;MACxCtB,SAAS,CAACoB,OAAO,GAAG,EAAE;MAEtBE,aAAa,CAACE,eAAe,GAAIC,KAAK,IAAK;QACzC,IAAIA,KAAK,CAACpB,IAAI,CAACqB,IAAI,GAAG,CAAC,EAAE;UACvB1B,SAAS,CAACoB,OAAO,CAACO,IAAI,CAACF,KAAK,CAACpB,IAAI,CAAC;QACpC;MACF,CAAC;MAEDiB,aAAa,CAACM,MAAM,GAAG,MAAM;QAC3B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC9B,SAAS,CAACoB,OAAO,EAAE;UAAEW,IAAI,EAAE;QAAa,CAAC,CAAC;QAChE7C,WAAW,CAAC8C,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC,CAAC;QACtCzC,WAAW,CAACyC,IAAI,CAAC;QACjBK,aAAa,CAACjC,QAAQ,CAACmB,OAAO,CAAC;MACjC,CAAC;MAEDE,aAAa,CAACa,KAAK,CAAC,IAAI,CAAC;MACzBnD,YAAY,CAAC,IAAI,CAAC;MAElBM,WAAW,CAAC,CAAC,CAAC;MACdW,QAAQ,CAACmB,OAAO,GAAGgB,WAAW,CAAC,MAAM;QACnC9C,WAAW,CAAE+C,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;MACjC,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC,OAAO1C,KAAK,EAAE;MACdC,QAAQ,CAAC,wBAAwBD,KAAK,CAACgB,OAAO,EAAE,CAAC;IACnD;EACF,CAAC;EAED,MAAM2B,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIxC,gBAAgB,CAACsB,OAAO,IAAItB,gBAAgB,CAACsB,OAAO,CAACmB,KAAK,KAAK,UAAU,EAAE;MAAA,IAAAC,kBAAA;MAC7E1C,gBAAgB,CAACsB,OAAO,CAACqB,IAAI,CAAC,CAAC;MAC/B,CAAAD,kBAAA,GAAAzC,SAAS,CAACqB,OAAO,cAAAoB,kBAAA,uBAAjBA,kBAAA,CAAmBE,SAAS,CAAC,CAAC,CAACC,OAAO,CAAEC,KAAK,IAAKA,KAAK,CAACH,IAAI,CAAC,CAAC,CAAC;MAC/DzD,YAAY,CAAC,KAAK,CAAC;MACnBkD,aAAa,CAACjC,QAAQ,CAACmB,OAAO,CAAC;IACjC;EACF,CAAC;EAED,MAAMyB,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAAC1D,QAAQ,EAAE;MACbS,QAAQ,CAAC,wBAAwB,CAAC;MAClC;IACF;IAEA,IAAI;MACFJ,YAAY,CAAC,IAAI,CAAC;MAClBI,QAAQ,CAAC,IAAI,CAAC;;MAEd;MACA,MAAMkD,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE7D,QAAQ,EAAE,gBAAgB,CAAC;MAEpD8D,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE/D,QAAQ,CAACuC,IAAI,CAAC;;MAErD;MACA,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjE+C,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,MAAMO,YAAY,GAAG,MAAMlD,QAAQ,CAACmD,IAAI,CAAC,CAAC;MAC1CL,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEG,YAAY,CAAC;MAElD,IAAIE,QAAQ;MACZ,IAAI;QACFA,QAAQ,GAAG/C,IAAI,CAACgD,KAAK,CAACH,YAAY,CAAC;MACrC,CAAC,CAAC,OAAOI,CAAC,EAAE;QACV,MAAM,IAAIC,KAAK,CAAC,0BAA0BL,YAAY,EAAE,CAAC;MAC3D;MAEA,IAAI,CAAClD,QAAQ,CAACwD,EAAE,EAAE;QAChB,MAAM,IAAID,KAAK,CAACH,QAAQ,CAAC5D,KAAK,IAAI4D,QAAQ,CAACK,OAAO,IAAI,iBAAiBzD,QAAQ,CAAC0D,MAAM,EAAE,CAAC;MAC3F;MAEAnE,mBAAmB,CAAC6D,QAAQ,CAACO,OAAO,CAAC;MACrCvD,KAAK,CAAC,8BAA8B,CAAC;IACvC,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdsD,OAAO,CAACtD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CC,QAAQ,CAAC,kBAAkBD,KAAK,CAACgB,OAAO,EAAE,CAAC;IAC7C,CAAC,SAAS;MACRnB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACEZ,OAAA;IAAKmF,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBpF,OAAA;MAAKmF,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnBpF,OAAA;QACEmF,SAAS,EAAC,+CAA+C;QACzDE,OAAO,EAAErD,UAAW;QAAAoD,QAAA,EAAC;MAEvB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTzF,OAAA;QACEmF,SAAS,EAAC,2CAA2C;QACrDE,OAAO,EAAE/D,OAAQ;QAAA8D,QAAA,EAAC;MAEpB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENzF,OAAA;MAAKmF,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BpF,OAAA;QACEmF,SAAS,EAAC,+DAA+D;QACzEE,OAAO,EAAEpD,cAAe;QACxByD,QAAQ,EAAEvF,SAAU;QAAAiF,QAAA,EAAC;MAEvB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTzF,OAAA;QACEmF,SAAS,EAAC,8DAA8D;QACxEE,OAAO,EAAE3B,aAAc;QACvBgC,QAAQ,EAAE,CAACvF,SAAU;QAAAiF,QAAA,EAAC;MAExB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTzF,OAAA;QACEmF,SAAS,EAAC,gEAAgE;QAC1EE,OAAO,EAAEpB,cAAe;QACxByB,QAAQ,EAAE,CAACrF,QAAQ,IAAIM,SAAU;QAAAyE,QAAA,EAChCzE,SAAS,GAAG,cAAc,GAAG;MAAc;QAAA2E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAEL1E,KAAK,iBACJf,OAAA;MAAKmF,SAAS,EAAC,gEAAgE;MAAAC,QAAA,EAC5ErE;IAAK;MAAAuE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAEDzF,OAAA;MAAKmF,SAAS,EAAC,yBAAyB;MAAAC,QAAA,gBACtCpF,OAAA;QAAImF,SAAS,EAAC,4BAA4B;QAAAC,QAAA,EACvCjF,SAAS,GAAG,gBAAgBM,QAAQ,GAAG,GAAG;MAAgB;QAAA6E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzD,CAAC,eACLzF,OAAA;QAAKmF,SAAS,EAAC,uBAAuB;QAAAC,QAAA,gBACpCpF,OAAA;UACE2F,GAAG,EAAE1E,QAAS;UACd2E,QAAQ;UACRC,WAAW;UACXC,KAAK;UACLC,KAAK,EAAC,MAAM;UACZC,KAAK,EAAE;YAAEC,OAAO,EAAE5F,QAAQ,GAAG,MAAM,GAAG;UAAQ;QAAE;UAAAiF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD,CAAC,EACDpF,QAAQ,iBACPL,OAAA;UACEkG,GAAG,EAAE7F,QAAS;UACd8F,QAAQ;UACRJ,KAAK,EAAC;QAAM;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAED,CAAC,EAEL5E,gBAAgB,iBACfb,OAAA;QAAKmF,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnBpF,OAAA;UAAImF,SAAS,EAAC,4BAA4B;UAAAC,QAAA,EAAC;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9DzF,OAAA;UAAGmF,SAAS,EAAC,sCAAsC;UAAAC,QAAA,EAAEvE;QAAgB;UAAAyE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1EzF,OAAA;UACEoG,IAAI,EAAEvF,gBAAiB;UACvBwF,MAAM,EAAC,QAAQ;UACfC,GAAG,EAAC,qBAAqB;UACzBnB,SAAS,EAAC,yBAAyB;UAAAC,QAAA,EACpC;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvF,EAAA,CArNID,aAAa;AAAAsG,EAAA,GAAbtG,aAAa;AAuNnB,eAAeA,aAAa;AAAC,IAAAsG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}