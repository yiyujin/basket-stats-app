{"ast":null,"code":"var _jsxFileName = \"/Users/yujinyi/Desktop/basket-stats-app/frontend/src/components/RecordingVideo.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RecordingVideo({\n  setLogTimestamp,\n  setUploadTimestamp\n}) {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [videoURL, setVideoURL] = useState(null);\n  const [blobData, setBlobData] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadedVideoUrl, setUploadedVideoUrl] = useState(null);\n  const [fetchedVideoUrl, setFetchedVideoUrl] = useState(null);\n  const streamRef = useRef(null);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const timerRef = useRef(null);\n\n  // State for player timestamps\n  const [timestamps, setTimestamps] = useState([]);\n  const [timestampData, setTimestampData] = useState(null);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      streamRef.current = stream;\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.start(1000);\n      setRecording(true);\n      setTimestamps([]); // reset timestamps\n      setTimestampData(null); // reset timestamp data\n\n      setDuration(0);\n      timerRef.current = setInterval(() => {\n        setDuration(prev => prev + 1);\n      }, 1000);\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, {\n          type: \"video/webm\"\n        });\n        setVideoURL(URL.createObjectURL(blob));\n        setBlobData(blob);\n        clearInterval(timerRef.current);\n      };\n    } catch (error) {\n      console.log(`Camera access error : ${error.message}`);\n    }\n  };\n  const endRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n      var _streamRef$current;\n      mediaRecorderRef.current.stop();\n      (_streamRef$current = streamRef.current) === null || _streamRef$current === void 0 ? void 0 : _streamRef$current.getTracks().forEach(track => track.stop());\n      setRecording(false);\n      clearInterval(timerRef.current);\n    }\n  };\n  const uploadRecording = async () => {\n    if (!blobData) {\n      console.log(`no blob data!`);\n      return;\n    }\n    try {\n      setUploading(true);\n      const formData = new FormData();\n      formData.append('video', blobData, 'recording.webm');\n      console.log(\"Uploading file of size:\", blobData.size);\n      const response = await fetch(\"http://localhost:8000/upload-video\", {\n        method: \"POST\",\n        body: formData\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || data.details || `Server error: ${response.status}`);\n      }\n      setUploadedVideoUrl(data.fileUrl);\n      await postUrl(\"Name of Video\", data.fileUrl);\n      alert(\"Video uploaded successfully!\");\n    } catch (error) {\n      console.error(\"Error during upload:\", error);\n      console.log(error.message);\n    } finally {\n      setUploading(false);\n    }\n  };\n  const getVideo = async () => {\n    if (!uploadedVideoUrl) {\n      alert(\"No uploaded video URL yet. Upload first!\");\n      return;\n    }\n    try {\n      const fileKey = uploadedVideoUrl.split(\"?\")[0].split(\"/\").pop();\n      console.log(\"Fetching video for fileKey:\", fileKey);\n      const response = await fetch(`http://localhost:8000/get-video-url/${fileKey}`);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || `Server error: ${response.status}`);\n      }\n      console.log(\"Got presigned URL:\", data.fileUrl);\n      setFetchedVideoUrl(data.fileUrl);\n    } catch (error) {\n      console.error(\"Error fetching video URL:\", error);\n    }\n  };\n\n  // POST Url to Database\n  const postUrl = async (name, url) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/api/create-a-page\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name,\n          url\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      console.log(\"Url is posted to DB successfully\");\n    } catch (error) {\n      console.error(\"Error posting url to DB:\", error.message);\n    }\n  };\n\n  // Define logTimestamp as a callback to prevent recreation on every render\n  const logTimestamp = useCallback(playerId => {\n    console.log(\"logTimestamp called with player ID:\", playerId, \"Recording:\", recording);\n    if (recording) {\n      const newTimestamp = {\n        id: playerId,\n        timestamp: duration\n      };\n      setTimestamps(prev => {\n        const updatedTimestamps = [...prev, newTimestamp];\n        console.log(\"Updated timestamps:\", updatedTimestamps);\n        return updatedTimestamps;\n      });\n      console.log(`📍 Timestamp: ${duration}s for player ${playerId}`);\n    } else {\n      console.warn(\"Cannot log timestamp: not recording\");\n    }\n  }, [recording, duration]);\n\n  // Upload all collected timestamps\n  const uploadTimestamp = useCallback(() => {\n    console.log(\"uploadTimestamp called, timestamps count:\", timestamps.length);\n    if (timestamps.length === 0) {\n      console.warn(\"No timestamps to upload!\");\n      return;\n    }\n    const jsonData = {\n      video_name: \"Recording\",\n      duration: duration,\n      timestamps: timestamps // Array of {id, timestamp} objects\n    };\n    setTimestampData(jsonData);\n    console.log(\"📤 Uploaded Timestamps:\", jsonData);\n\n    // Here you would typically send this data to your server\n    // For example:\n    // sendTimestampsToServer(jsonData);\n  }, [timestamps, duration]);\n\n  // Set the external functions when component mounts or when functions change\n  useEffect(() => {\n    console.log(\"Setting external timestamp functions\");\n    if (setLogTimestamp) {\n      console.log(\"Setting logTimestamp function\");\n      setLogTimestamp(logTimestamp);\n    }\n    if (setUploadTimestamp) {\n      console.log(\"Setting uploadTimestamp function\");\n      setUploadTimestamp(uploadTimestamp);\n    }\n  }, [setLogTimestamp, setUploadTimestamp, logTimestamp, uploadTimestamp]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px',\n        padding: '10px',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '4px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startRecording,\n        style: {\n          padding: '8px',\n          margin: '0 4px',\n          backgroundColor: recording ? '#e74c3c' : '#3498db',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px'\n        },\n        children: \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: endRecording,\n        disabled: !recording,\n        style: {\n          padding: '8px',\n          margin: '0 4px',\n          backgroundColor: '#e74c3c',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          opacity: recording ? 1 : 0.5\n        },\n        children: \"End Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: uploadRecording,\n        disabled: !videoURL || uploading,\n        style: {\n          padding: '8px',\n          margin: '0 4px',\n          backgroundColor: '#2ecc71',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          opacity: !videoURL || uploading ? 0.5 : 1\n        },\n        children: uploading ? \"Uploading...\" : \"Upload Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getVideo,\n        disabled: !uploadedVideoUrl,\n        style: {\n          padding: '8px',\n          margin: '0 4px',\n          backgroundColor: '#9b59b6',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          opacity: !uploadedVideoUrl ? 0.5 : 1\n        },\n        children: \"Get Uploaded Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this), recording && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '10px',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '4px',\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Recording in progress: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 21\n      }, this), \" \", duration, \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Timestamps (\", timestamps.length, \"):\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), timestamps.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxHeight: '150px',\n          overflowY: 'auto',\n          padding: '10px',\n          backgroundColor: '#f8f9fa',\n          borderRadius: '4px'\n        },\n        children: timestamps.map((time, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u23F1 Player ID: \", time.id, \", Time: \", time.timestamp, \"s\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No timestamps recorded yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: uploadTimestamp,\n        disabled: timestamps.length === 0,\n        style: {\n          padding: '8px',\n          margin: '10px 0',\n          backgroundColor: '#f39c12',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          opacity: timestamps.length === 0 ? 0.5 : 1\n        },\n        children: \"Upload All Timestamps\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }, this), timestampData && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px',\n        padding: '10px',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '4px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Timestamp Data (JSON):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        style: {\n          overflowX: 'auto',\n          padding: '10px',\n          backgroundColor: '#f0f0f0',\n          borderRadius: '4px'\n        },\n        children: JSON.stringify(timestampData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 17\n    }, this), blobData && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Video size: \", Math.round(blobData.size / 1024), \" KB\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"liveVideo\",\n        ref: videoRef,\n        style: {\n          display: videoURL && !recording ? 'none' : 'block',\n          width: '100%',\n          borderRadius: '8px',\n          backgroundColor: '#000'\n        },\n        autoPlay: true,\n        playsInline: true,\n        muted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this), videoURL && !recording && /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"playbackVideo\",\n        src: videoURL,\n        controls: true,\n        style: {\n          width: '100%',\n          borderRadius: '8px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 21\n      }, this), fetchedVideoUrl && /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"fetchedVideo\",\n        src: fetchedVideoUrl,\n        controls: true,\n        style: {\n          width: '100%',\n          marginTop: '10px',\n          borderRadius: '8px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 9\n  }, this);\n}\n_s(RecordingVideo, \"GTNELD4r+cnSKw4LY8dw5dAzWBw=\");\n_c = RecordingVideo;\nvar _c;\n$RefreshReg$(_c, \"RecordingVideo\");","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","RecordingVideo","setLogTimestamp","setUploadTimestamp","_s","recording","setRecording","duration","setDuration","videoURL","setVideoURL","blobData","setBlobData","uploading","setUploading","uploadedVideoUrl","setUploadedVideoUrl","fetchedVideoUrl","setFetchedVideoUrl","streamRef","videoRef","mediaRecorderRef","chunksRef","timerRef","timestamps","setTimestamps","timestampData","setTimestampData","startRecording","stream","navigator","mediaDevices","getUserMedia","video","audio","current","srcObject","mediaRecorder","MediaRecorder","ondataavailable","event","data","size","push","start","setInterval","prev","onstop","blob","Blob","type","URL","createObjectURL","clearInterval","error","console","log","message","endRecording","state","_streamRef$current","stop","getTracks","forEach","track","uploadRecording","formData","FormData","append","response","fetch","method","body","json","ok","Error","details","status","fileUrl","postUrl","alert","getVideo","fileKey","split","pop","name","url","headers","JSON","stringify","logTimestamp","playerId","newTimestamp","id","timestamp","updatedTimestamps","warn","uploadTimestamp","length","jsonData","video_name","children","style","marginBottom","padding","backgroundColor","borderRadius","onClick","margin","color","border","fileName","_jsxFileName","lineNumber","columnNumber","disabled","opacity","maxHeight","overflowY","map","time","index","overflowX","Math","round","marginTop","className","ref","display","width","autoPlay","playsInline","muted","src","controls","_c","$RefreshReg$"],"sources":["/Users/yujinyi/Desktop/basket-stats-app/frontend/src/components/RecordingVideo.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\"\n\nexport default function RecordingVideo({ setLogTimestamp, setUploadTimestamp }) {\n    const [recording, setRecording] = useState(false);\n    const [duration, setDuration] = useState(0);\n\n    const [videoURL, setVideoURL] = useState(null);\n    const [blobData, setBlobData] = useState(null);\n\n    const [uploading, setUploading] = useState(false);\n    const [uploadedVideoUrl, setUploadedVideoUrl] = useState(null);\n\n    const [fetchedVideoUrl, setFetchedVideoUrl] = useState(null);\n\n    const streamRef = useRef(null);\n    const videoRef = useRef(null);\n    const mediaRecorderRef = useRef(null);\n    const chunksRef = useRef([]);\n    const timerRef = useRef(null);\n\n    // State for player timestamps\n    const [timestamps, setTimestamps] = useState([]);\n    const [timestampData, setTimestampData] = useState(null);\n\n    const startRecording = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ \n                video: true,\n                audio: true\n            });\n\n            streamRef.current = stream;\n\n            if (videoRef.current) {\n                videoRef.current.srcObject = stream;\n            }\n\n            const mediaRecorder = new MediaRecorder(stream);\n            \n            mediaRecorderRef.current = mediaRecorder;\n            chunksRef.current = [];\n\n            mediaRecorder.ondataavailable = (event) => {\n                if (event.data.size > 0) {\n                    chunksRef.current.push(event.data);\n                }\n            };\n\n            mediaRecorder.start(1000);\n            setRecording(true);\n            setTimestamps([]); // reset timestamps\n            setTimestampData(null); // reset timestamp data\n\n            setDuration(0);\n            timerRef.current = setInterval(() => {\n                setDuration((prev) => prev + 1);\n            }, 1000);\n\n            mediaRecorder.onstop = () => {\n                const blob = new Blob(chunksRef.current, { type: \"video/webm\" });\n                setVideoURL(URL.createObjectURL(blob));\n                setBlobData(blob);\n                clearInterval(timerRef.current);\n            };\n        } catch (error) {\n            console.log(`Camera access error : ${error.message}`);\n        }\n    }\n\n    const endRecording = () => {\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n            mediaRecorderRef.current.stop();\n            streamRef.current?.getTracks().forEach((track) => track.stop());\n\n            setRecording(false);\n            clearInterval(timerRef.current);\n        }\n    }\n\n    const uploadRecording = async () => {\n        if (!blobData) {\n            console.log(`no blob data!`);\n            return;\n        }\n    \n        try {\n            setUploading(true);\n\n            const formData = new FormData();\n            formData.append('video', blobData, 'recording.webm');\n            \n            console.log(\"Uploading file of size:\", blobData.size);\n        \n            const response = await fetch(\"http://localhost:8000/upload-video\", {\n                method: \"POST\",\n                body: formData,\n            });\n    \n            const data = await response.json();\n            \n            if (!response.ok) {\n                throw new Error(data.error || data.details || `Server error: ${response.status}`);\n            }\n    \n            setUploadedVideoUrl(data.fileUrl);\n\n            await postUrl(\"Name of Video\", data.fileUrl);\n\n            alert(\"Video uploaded successfully!\");\n        } catch (error) {\n            console.error(\"Error during upload:\", error);\n            console.log(error.message);\n        } finally {\n            setUploading(false);\n        }\n    };\n\n    const getVideo = async () => {\n        if (!uploadedVideoUrl) {\n            alert(\"No uploaded video URL yet. Upload first!\");\n            return;\n        }\n    \n        try {\n            const fileKey = uploadedVideoUrl.split(\"?\")[0].split(\"/\").pop();\n            console.log(\"Fetching video for fileKey:\", fileKey);\n    \n            const response = await fetch(`http://localhost:8000/get-video-url/${fileKey}`);\n            \n            const data = await response.json();\n    \n            if (!response.ok) {\n                throw new Error(data.error || `Server error: ${response.status}`);\n            }\n    \n            console.log(\"Got presigned URL:\", data.fileUrl);\n    \n            setFetchedVideoUrl(data.fileUrl);\n        } catch (error) {\n            console.error(\"Error fetching video URL:\", error);\n        }\n    };\n\n    // POST Url to Database\n    const postUrl = async (name, url) => {\n        try {\n            const response = await fetch(\"http://localhost:8000/api/create-a-page\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    name,\n                    url\n                }),\n            });\n    \n            if (!response.ok) {\n                throw new Error(\"Network response was not ok\");\n            }\n    \n            console.log(\"Url is posted to DB successfully\");\n        } catch (error) {\n            console.error(\"Error posting url to DB:\", error.message);\n        }\n    };\n\n    // Define logTimestamp as a callback to prevent recreation on every render\n    const logTimestamp = useCallback((playerId) => {\n        console.log(\"logTimestamp called with player ID:\", playerId, \"Recording:\", recording);\n        if (recording) {\n            const newTimestamp = {\n                id: playerId,\n                timestamp: duration\n            };\n            \n            setTimestamps(prev => {\n                const updatedTimestamps = [...prev, newTimestamp];\n                console.log(\"Updated timestamps:\", updatedTimestamps);\n                return updatedTimestamps;\n            });\n            \n            console.log(`📍 Timestamp: ${duration}s for player ${playerId}`);\n        } else {\n            console.warn(\"Cannot log timestamp: not recording\");\n        }\n    }, [recording, duration]);\n\n    // Upload all collected timestamps\n    const uploadTimestamp = useCallback(() => {\n        console.log(\"uploadTimestamp called, timestamps count:\", timestamps.length);\n        if (timestamps.length === 0) {\n            console.warn(\"No timestamps to upload!\");\n            return;\n        }\n\n        const jsonData = {\n            video_name: \"Recording\",\n            duration: duration,\n            timestamps: timestamps // Array of {id, timestamp} objects\n        };\n\n        setTimestampData(jsonData);\n        console.log(\"📤 Uploaded Timestamps:\", jsonData);\n        \n        // Here you would typically send this data to your server\n        // For example:\n        // sendTimestampsToServer(jsonData);\n    }, [timestamps, duration]);\n    \n    // Set the external functions when component mounts or when functions change\n    useEffect(() => {\n        console.log(\"Setting external timestamp functions\");\n        if (setLogTimestamp) {\n            console.log(\"Setting logTimestamp function\");\n            setLogTimestamp(logTimestamp);\n        }\n        if (setUploadTimestamp) {\n            console.log(\"Setting uploadTimestamp function\");\n            setUploadTimestamp(uploadTimestamp);\n        }\n    }, [setLogTimestamp, setUploadTimestamp, logTimestamp, uploadTimestamp]);\n\n    return(\n        <div>\n            <div style={{ marginBottom: '10px', padding: '10px', backgroundColor: '#f8f9fa', borderRadius: '4px' }}>\n                <button \n                    onClick={startRecording}\n                    style={{ padding: '8px', margin: '0 4px', backgroundColor: recording ? '#e74c3c' : '#3498db', color: 'white', border: 'none', borderRadius: '4px' }}\n                >\n                    Start Recording\n                </button>\n                <button \n                    onClick={endRecording} \n                    disabled={!recording}\n                    style={{ padding: '8px', margin: '0 4px', backgroundColor: '#e74c3c', color: 'white', border: 'none', borderRadius: '4px', opacity: recording ? 1 : 0.5 }}\n                >\n                    End Recording\n                </button>\n                <button \n                    onClick={uploadRecording} \n                    disabled={!videoURL || uploading}\n                    style={{ padding: '8px', margin: '0 4px', backgroundColor: '#2ecc71', color: 'white', border: 'none', borderRadius: '4px', opacity: (!videoURL || uploading) ? 0.5 : 1 }}\n                >\n                    {uploading ? \"Uploading...\" : \"Upload Video\"}\n                </button>\n                <button \n                    onClick={getVideo} \n                    disabled={!uploadedVideoUrl}\n                    style={{ padding: '8px', margin: '0 4px', backgroundColor: '#9b59b6', color: 'white', border: 'none', borderRadius: '4px', opacity: !uploadedVideoUrl ? 0.5 : 1 }}\n                >\n                    Get Uploaded Video\n                </button>\n            </div>\n\n            {recording && (\n                <div style={{ padding: '10px', backgroundColor: '#f8f9fa', borderRadius: '4px', marginBottom: '10px' }}>\n                    <strong>Recording in progress: </strong> {duration}s\n                </div>\n            )}\n\n            <div style={{ marginBottom: '10px' }}>\n                <h3>Timestamps ({timestamps.length}):</h3>\n                {timestamps.length > 0 ? (\n                    <div style={{ maxHeight: '150px', overflowY: 'auto', padding: '10px', backgroundColor: '#f8f9fa', borderRadius: '4px' }}>\n                        {timestamps.map((time, index) => (\n                            <p key={index}>⏱ Player ID: {time.id}, Time: {time.timestamp}s</p>\n                        ))}\n                    </div>\n                ) : (\n                    <p>No timestamps recorded yet</p>\n                )}\n                \n                <button \n                    onClick={uploadTimestamp}\n                    disabled={timestamps.length === 0}\n                    style={{ padding: '8px', margin: '10px 0', backgroundColor: '#f39c12', color: 'white', border: 'none', borderRadius: '4px', opacity: timestamps.length === 0 ? 0.5 : 1 }}\n                >\n                    Upload All Timestamps\n                </button>\n            </div>\n\n            {timestampData && (\n                <div style={{ marginBottom: '10px', padding: '10px', backgroundColor: '#f8f9fa', borderRadius: '4px' }}>\n                    <h3>Timestamp Data (JSON):</h3>\n                    <pre style={{ overflowX: 'auto', padding: '10px', backgroundColor: '#f0f0f0', borderRadius: '4px' }}>\n                        {JSON.stringify(timestampData, null, 2)}\n                    </pre>\n                </div>\n            )}\n\n            {blobData && (\n                <div style={{ marginBottom: '10px' }}>\n                    <p>Video size: {Math.round(blobData.size / 1024)} KB</p>\n                </div>\n            )}\n\n            <div style={{ marginTop: '20px' }}>\n                {/* LIVE VIDEO */}\n                <video \n                    className=\"liveVideo\" \n                    ref={videoRef}  \n                    style={{ \n                        display: videoURL && !recording ? 'none' : 'block',\n                        width: '100%',\n                        borderRadius: '8px',\n                        backgroundColor: '#000'\n                    }}  \n                    autoPlay \n                    playsInline \n                    muted \n                />\n\n                {/* PLAYER VIDEO */}\n                {videoURL && !recording && (\n                    <video \n                        className=\"playbackVideo\" \n                        src={videoURL} \n                        controls \n                        style={{ width: '100%', borderRadius: '8px' }}\n                    />\n                )}\n\n                {/* FETCHED VIDEO FROM SERVER */}\n                {fetchedVideoUrl && (\n                    <video \n                        className=\"fetchedVideo\" \n                        src={fetchedVideoUrl} \n                        controls \n                        style={{ width: '100%', marginTop: '10px', borderRadius: '8px' }}\n                    />\n                )}\n            </div>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}