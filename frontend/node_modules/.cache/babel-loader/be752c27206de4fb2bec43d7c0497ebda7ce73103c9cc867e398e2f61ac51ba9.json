{"ast":null,"code":"var _jsxFileName = \"/Users/yujinyi/Desktop/basket-stats-app/frontend/src/components/VideoRecorder.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoRecorder = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [videoURL, setVideoURL] = useState(null);\n  const [blobData, setBlobData] = useState(null);\n  const [duration, setDuration] = useState(0);\n  const [uploading, setUploading] = useState(false);\n  const [uploadedVideoUrl, setUploadedVideoUrl] = useState(null);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const chunksRef = useRef([]);\n  const timerRef = useRef(null);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true // Adding audio to the recording\n      });\n      streamRef.current = stream;\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: 'video/webm;codecs=vp9,opus' // Specify codecs for better compatibility\n      });\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, {\n          type: \"video/webm\"\n        });\n        setVideoURL(URL.createObjectURL(blob));\n        setBlobData(blob); // Store blob for upload\n        clearInterval(timerRef.current);\n      };\n      mediaRecorder.start(1000); // Capture in 1-second chunks\n      setRecording(true);\n\n      // Start Timer\n      setDuration(0);\n      timerRef.current = setInterval(() => {\n        setDuration(prev => prev + 1);\n      }, 1000);\n    } catch (error) {\n      console.error(\"Error accessing media devices:\", error);\n      alert(`Cannot access camera/microphone: ${error.message}`);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n      var _streamRef$current;\n      mediaRecorderRef.current.stop();\n      (_streamRef$current = streamRef.current) === null || _streamRef$current === void 0 ? void 0 : _streamRef$current.getTracks().forEach(track => track.stop());\n      setRecording(false);\n      clearInterval(timerRef.current);\n    }\n  };\n  const uploadToServer = async () => {\n    if (!blobData) {\n      alert(\"No video recorded yet!\");\n      return;\n    }\n    try {\n      setUploading(true);\n      const fileName = `video-${Date.now()}.webm`;\n\n      // Request pre-signed URL from backend\n      const res = await fetch(\"http://localhost:8000/generate-presigned-url\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          fileName,\n          fileType: \"video/webm\"\n        })\n      });\n      if (!res.ok) {\n        throw new Error(`Server responded with status: ${res.status}`);\n      }\n      const {\n        uploadURL,\n        fileUrl\n      } = await res.json();\n\n      // Upload the video to S3\n      const uploadResponse = await fetch(uploadURL, {\n        method: \"PUT\",\n        body: blobData,\n        headers: {\n          \"Content-Type\": \"video/webm\"\n        }\n      });\n      if (!uploadResponse.ok) {\n        throw new Error(`Upload failed with status: ${uploadResponse.status}`);\n      }\n      setUploadedVideoUrl(fileUrl);\n      alert(\"Video uploaded successfully to S3!\");\n    } catch (error) {\n      console.error(\"Error during upload:\", error);\n      alert(`Upload failed: ${error.message}`);\n    } finally {\n      setUploading(false);\n    }\n  };\n  useEffect(() => {\n    return () => {\n      var _streamRef$current2;\n      (_streamRef$current2 = streamRef.current) === null || _streamRef$current2 === void 0 ? void 0 : _streamRef$current2.getTracks().forEach(track => track.stop());\n      clearInterval(timerRef.current);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 max-w-lg mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2 mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-4 py-2 rounded ${recording ? 'bg-gray-300' : 'bg-blue-500 text-white'}`,\n        onClick: startRecording,\n        disabled: recording,\n        children: \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-4 py-2 rounded ${!recording ? 'bg-gray-300' : 'bg-red-500 text-white'}`,\n        onClick: stopRecording,\n        disabled: !recording,\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-4 py-2 rounded ${!videoURL || uploading ? 'bg-gray-300' : 'bg-green-500 text-white'}`,\n        onClick: uploadToServer,\n        disabled: !videoURL || uploading,\n        children: uploading ? \"Uploading...\" : \"Upload to S3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-100 p-4 rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: recording ? `Recording... ${duration}s` : \"Recorded Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aspect-video bg-black\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          autoPlay: true,\n          playsInline: true,\n          width: \"100%\",\n          style: {\n            display: videoURL ? 'none' : 'block'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), videoURL && /*#__PURE__*/_jsxDEV(\"video\", {\n          src: videoURL,\n          controls: true,\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), uploadedVideoUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold mb-2\",\n          children: \"Uploaded Video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600 mb-2 break-all\",\n          children: uploadedVideoUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: uploadedVideoUrl,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"text-blue-500 underline\",\n          children: \"View uploaded video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoRecorder, \"lgSMAsyxwl9BbwCbBNXQ25zQCKY=\");\n_c = VideoRecorder;\nexport default VideoRecorder;\nvar _c;\n$RefreshReg$(_c, \"VideoRecorder\");","map":{"version":3,"names":["useState","useRef","useEffect","jsxDEV","_jsxDEV","VideoRecorder","_s","recording","setRecording","videoURL","setVideoURL","blobData","setBlobData","duration","setDuration","uploading","setUploading","uploadedVideoUrl","setUploadedVideoUrl","videoRef","mediaRecorderRef","streamRef","chunksRef","timerRef","startRecording","stream","navigator","mediaDevices","getUserMedia","video","audio","current","srcObject","mediaRecorder","MediaRecorder","mimeType","ondataavailable","event","data","size","push","onstop","blob","Blob","type","URL","createObjectURL","clearInterval","start","setInterval","prev","error","console","alert","message","stopRecording","state","_streamRef$current","stop","getTracks","forEach","track","uploadToServer","fileName","Date","now","res","fetch","method","headers","body","JSON","stringify","fileType","ok","Error","status","uploadURL","fileUrl","json","uploadResponse","_streamRef$current2","className","children","onClick","disabled","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","width","style","display","src","controls","href","target","rel","_c","$RefreshReg$"],"sources":["/Users/yujinyi/Desktop/basket-stats-app/frontend/src/components/VideoRecorder.js"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\n\nconst VideoRecorder = () => {\n  const [recording, setRecording] = useState(false);\n  const [videoURL, setVideoURL] = useState(null);\n  const [blobData, setBlobData] = useState(null);\n  const [duration, setDuration] = useState(0);\n  const [uploading, setUploading] = useState(false);\n  const [uploadedVideoUrl, setUploadedVideoUrl] = useState(null);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const chunksRef = useRef([]);\n  const timerRef = useRef(null);\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        video: true,\n        audio: true // Adding audio to the recording\n      });\n      streamRef.current = stream;\n\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n\n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: 'video/webm;codecs=vp9,opus' // Specify codecs for better compatibility\n      });\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, { type: \"video/webm\" });\n        setVideoURL(URL.createObjectURL(blob));\n        setBlobData(blob); // Store blob for upload\n        clearInterval(timerRef.current);\n      };\n\n      mediaRecorder.start(1000); // Capture in 1-second chunks\n      setRecording(true);\n\n      // Start Timer\n      setDuration(0);\n      timerRef.current = setInterval(() => {\n        setDuration((prev) => prev + 1);\n      }, 1000);\n    } catch (error) {\n      console.error(\"Error accessing media devices:\", error);\n      alert(`Cannot access camera/microphone: ${error.message}`);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n      mediaRecorderRef.current.stop();\n      streamRef.current?.getTracks().forEach((track) => track.stop());\n      setRecording(false);\n      clearInterval(timerRef.current);\n    }\n  };\n\n  const uploadToServer = async () => {\n    if (!blobData) {\n      alert(\"No video recorded yet!\");\n      return;\n    }\n\n    try {\n      setUploading(true);\n      const fileName = `video-${Date.now()}.webm`;\n\n      // Request pre-signed URL from backend\n      const res = await fetch(\"http://localhost:8000/generate-presigned-url\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ fileName, fileType: \"video/webm\" }),\n      });\n\n      if (!res.ok) {\n        throw new Error(`Server responded with status: ${res.status}`);\n      }\n\n      const { uploadURL, fileUrl } = await res.json();\n\n      // Upload the video to S3\n      const uploadResponse = await fetch(uploadURL, {\n        method: \"PUT\",\n        body: blobData,\n        headers: { \n          \"Content-Type\": \"video/webm\"\n        },\n      });\n\n      if (!uploadResponse.ok) {\n        throw new Error(`Upload failed with status: ${uploadResponse.status}`);\n      }\n\n      setUploadedVideoUrl(fileUrl);\n      alert(\"Video uploaded successfully to S3!\");\n    } catch (error) {\n      console.error(\"Error during upload:\", error);\n      alert(`Upload failed: ${error.message}`);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      streamRef.current?.getTracks().forEach((track) => track.stop());\n      clearInterval(timerRef.current);\n    };\n  }, []);\n\n  return (\n    <div className=\"p-4 max-w-lg mx-auto\">\n      <div className=\"flex gap-2 mb-4\">\n        <button \n          className={`px-4 py-2 rounded ${recording ? 'bg-gray-300' : 'bg-blue-500 text-white'}`}\n          onClick={startRecording} \n          disabled={recording}>\n          Start Recording\n        </button>\n        <button \n          className={`px-4 py-2 rounded ${!recording ? 'bg-gray-300' : 'bg-red-500 text-white'}`}\n          onClick={stopRecording} \n          disabled={!recording}>\n          Stop Recording\n        </button>\n        <button \n          className={`px-4 py-2 rounded ${!videoURL || uploading ? 'bg-gray-300' : 'bg-green-500 text-white'}`}\n          onClick={uploadToServer} \n          disabled={!videoURL || uploading}>\n          {uploading ? \"Uploading...\" : \"Upload to S3\"}\n        </button>\n      </div>\n\n      <div className=\"bg-gray-100 p-4 rounded\">\n        <h3 className=\"text-lg font-semibold mb-2\">\n          {recording ? `Recording... ${duration}s` : \"Recorded Video\"}\n        </h3>\n        <div className=\"aspect-video bg-black\">\n          <video \n            ref={videoRef} \n            autoPlay \n            playsInline \n            width=\"100%\" \n            style={{ display: videoURL ? 'none' : 'block' }} \n          />\n          {videoURL && \n            <video \n              src={videoURL} \n              controls \n              width=\"100%\" \n            />\n          }\n        </div>\n        {uploadedVideoUrl && (\n          <div className=\"mt-4\">\n            <h3 className=\"text-lg font-semibold mb-2\">Uploaded Video</h3>\n            <p className=\"text-sm text-gray-600 mb-2 break-all\">{uploadedVideoUrl}</p>\n            <a \n              href={uploadedVideoUrl} \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-blue-500 underline\"\n            >\n              View uploaded video\n            </a>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default VideoRecorder;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACiB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAMmB,QAAQ,GAAGlB,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMmB,gBAAgB,GAAGnB,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMoB,SAAS,GAAGpB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMqB,SAAS,GAAGrB,MAAM,CAAC,EAAE,CAAC;EAC5B,MAAMsB,QAAQ,GAAGtB,MAAM,CAAC,IAAI,CAAC;EAE7B,MAAMuB,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QACvDC,KAAK,EAAE,IAAI;QACXC,KAAK,EAAE,IAAI,CAAC;MACd,CAAC,CAAC;MACFT,SAAS,CAACU,OAAO,GAAGN,MAAM;MAE1B,IAAIN,QAAQ,CAACY,OAAO,EAAE;QACpBZ,QAAQ,CAACY,OAAO,CAACC,SAAS,GAAGP,MAAM;MACrC;MAEA,MAAMQ,aAAa,GAAG,IAAIC,aAAa,CAACT,MAAM,EAAE;QAC9CU,QAAQ,EAAE,4BAA4B,CAAC;MACzC,CAAC,CAAC;MACFf,gBAAgB,CAACW,OAAO,GAAGE,aAAa;MACxCX,SAAS,CAACS,OAAO,GAAG,EAAE;MAEtBE,aAAa,CAACG,eAAe,GAAIC,KAAK,IAAK;QACzC,IAAIA,KAAK,CAACC,IAAI,CAACC,IAAI,GAAG,CAAC,EAAE;UACvBjB,SAAS,CAACS,OAAO,CAACS,IAAI,CAACH,KAAK,CAACC,IAAI,CAAC;QACpC;MACF,CAAC;MAEDL,aAAa,CAACQ,MAAM,GAAG,MAAM;QAC3B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACrB,SAAS,CAACS,OAAO,EAAE;UAAEa,IAAI,EAAE;QAAa,CAAC,CAAC;QAChElC,WAAW,CAACmC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC,CAAC;QACtC9B,WAAW,CAAC8B,IAAI,CAAC,CAAC,CAAC;QACnBK,aAAa,CAACxB,QAAQ,CAACQ,OAAO,CAAC;MACjC,CAAC;MAEDE,aAAa,CAACe,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;MAC3BxC,YAAY,CAAC,IAAI,CAAC;;MAElB;MACAM,WAAW,CAAC,CAAC,CAAC;MACdS,QAAQ,CAACQ,OAAO,GAAGkB,WAAW,CAAC,MAAM;QACnCnC,WAAW,CAAEoC,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;MACjC,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDE,KAAK,CAAC,oCAAoCF,KAAK,CAACG,OAAO,EAAE,CAAC;IAC5D;EACF,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAInC,gBAAgB,CAACW,OAAO,IAAIX,gBAAgB,CAACW,OAAO,CAACyB,KAAK,KAAK,UAAU,EAAE;MAAA,IAAAC,kBAAA;MAC7ErC,gBAAgB,CAACW,OAAO,CAAC2B,IAAI,CAAC,CAAC;MAC/B,CAAAD,kBAAA,GAAApC,SAAS,CAACU,OAAO,cAAA0B,kBAAA,uBAAjBA,kBAAA,CAAmBE,SAAS,CAAC,CAAC,CAACC,OAAO,CAAEC,KAAK,IAAKA,KAAK,CAACH,IAAI,CAAC,CAAC,CAAC;MAC/DlD,YAAY,CAAC,KAAK,CAAC;MACnBuC,aAAa,CAACxB,QAAQ,CAACQ,OAAO,CAAC;IACjC;EACF,CAAC;EAED,MAAM+B,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACnD,QAAQ,EAAE;MACb0C,KAAK,CAAC,wBAAwB,CAAC;MAC/B;IACF;IAEA,IAAI;MACFrC,YAAY,CAAC,IAAI,CAAC;MAClB,MAAM+C,QAAQ,GAAG,SAASC,IAAI,CAACC,GAAG,CAAC,CAAC,OAAO;;MAE3C;MACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,8CAA8C,EAAE;QACtEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAET,QAAQ;UAAEU,QAAQ,EAAE;QAAa,CAAC;MAC3D,CAAC,CAAC;MAEF,IAAI,CAACP,GAAG,CAACQ,EAAE,EAAE;QACX,MAAM,IAAIC,KAAK,CAAC,iCAAiCT,GAAG,CAACU,MAAM,EAAE,CAAC;MAChE;MAEA,MAAM;QAAEC,SAAS;QAAEC;MAAQ,CAAC,GAAG,MAAMZ,GAAG,CAACa,IAAI,CAAC,CAAC;;MAE/C;MACA,MAAMC,cAAc,GAAG,MAAMb,KAAK,CAACU,SAAS,EAAE;QAC5CT,MAAM,EAAE,KAAK;QACbE,IAAI,EAAE3D,QAAQ;QACd0D,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAI,CAACW,cAAc,CAACN,EAAE,EAAE;QACtB,MAAM,IAAIC,KAAK,CAAC,8BAA8BK,cAAc,CAACJ,MAAM,EAAE,CAAC;MACxE;MAEA1D,mBAAmB,CAAC4D,OAAO,CAAC;MAC5BzB,KAAK,CAAC,oCAAoC,CAAC;IAC7C,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CE,KAAK,CAAC,kBAAkBF,KAAK,CAACG,OAAO,EAAE,CAAC;IAC1C,CAAC,SAAS;MACRtC,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAEDd,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MAAA,IAAA+E,mBAAA;MACX,CAAAA,mBAAA,GAAA5D,SAAS,CAACU,OAAO,cAAAkD,mBAAA,uBAAjBA,mBAAA,CAAmBtB,SAAS,CAAC,CAAC,CAACC,OAAO,CAAEC,KAAK,IAAKA,KAAK,CAACH,IAAI,CAAC,CAAC,CAAC;MAC/DX,aAAa,CAACxB,QAAQ,CAACQ,OAAO,CAAC;IACjC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE3B,OAAA;IAAK8E,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnC/E,OAAA;MAAK8E,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9B/E,OAAA;QACE8E,SAAS,EAAE,qBAAqB3E,SAAS,GAAG,aAAa,GAAG,wBAAwB,EAAG;QACvF6E,OAAO,EAAE5D,cAAe;QACxB6D,QAAQ,EAAE9E,SAAU;QAAA4E,QAAA,EAAC;MAEvB;QAAApB,QAAA,EAAAuB,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTpF,OAAA;QACE8E,SAAS,EAAE,qBAAqB,CAAC3E,SAAS,GAAG,aAAa,GAAG,uBAAuB,EAAG;QACvF6E,OAAO,EAAE7B,aAAc;QACvB8B,QAAQ,EAAE,CAAC9E,SAAU;QAAA4E,QAAA,EAAC;MAExB;QAAApB,QAAA,EAAAuB,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTpF,OAAA;QACE8E,SAAS,EAAE,qBAAqB,CAACzE,QAAQ,IAAIM,SAAS,GAAG,aAAa,GAAG,yBAAyB,EAAG;QACrGqE,OAAO,EAAEtB,cAAe;QACxBuB,QAAQ,EAAE,CAAC5E,QAAQ,IAAIM,SAAU;QAAAoE,QAAA,EAChCpE,SAAS,GAAG,cAAc,GAAG;MAAc;QAAAgD,QAAA,EAAAuB,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC;IAAA;MAAAzB,QAAA,EAAAuB,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENpF,OAAA;MAAK8E,SAAS,EAAC,yBAAyB;MAAAC,QAAA,gBACtC/E,OAAA;QAAI8E,SAAS,EAAC,4BAA4B;QAAAC,QAAA,EACvC5E,SAAS,GAAG,gBAAgBM,QAAQ,GAAG,GAAG;MAAgB;QAAAkD,QAAA,EAAAuB,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzD,CAAC,eACLpF,OAAA;QAAK8E,SAAS,EAAC,uBAAuB;QAAAC,QAAA,gBACpC/E,OAAA;UACEqF,GAAG,EAAEtE,QAAS;UACduE,QAAQ;UACRC,WAAW;UACXC,KAAK,EAAC,MAAM;UACZC,KAAK,EAAE;YAAEC,OAAO,EAAErF,QAAQ,GAAG,MAAM,GAAG;UAAQ;QAAE;UAAAsD,QAAA,EAAAuB,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD,CAAC,EACD/E,QAAQ,iBACPL,OAAA;UACE2F,GAAG,EAAEtF,QAAS;UACduF,QAAQ;UACRJ,KAAK,EAAC;QAAM;UAAA7B,QAAA,EAAAuB,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb,CAAC;MAAA;QAAAzB,QAAA,EAAAuB,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAED,CAAC,EACLvE,gBAAgB,iBACfb,OAAA;QAAK8E,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnB/E,OAAA;UAAI8E,SAAS,EAAC,4BAA4B;UAAAC,QAAA,EAAC;QAAc;UAAApB,QAAA,EAAAuB,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9DpF,OAAA;UAAG8E,SAAS,EAAC,sCAAsC;UAAAC,QAAA,EAAElE;QAAgB;UAAA8C,QAAA,EAAAuB,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1EpF,OAAA;UACE6F,IAAI,EAAEhF,gBAAiB;UACvBiF,MAAM,EAAC,QAAQ;UACfC,GAAG,EAAC,qBAAqB;UACzBjB,SAAS,EAAC,yBAAyB;UAAAC,QAAA,EACpC;QAED;UAAApB,QAAA,EAAAuB,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAzB,QAAA,EAAAuB,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACN;IAAA;MAAAzB,QAAA,EAAAuB,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAzB,QAAA,EAAAuB,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClF,EAAA,CApLID,aAAa;AAAA+F,EAAA,GAAb/F,aAAa;AAsLnB,eAAeA,aAAa;AAAC,IAAA+F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}