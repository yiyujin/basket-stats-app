{"ast":null,"code":"var _jsxFileName = \"/Users/yujinyi/Desktop/basket-stats-app/frontend/src/components/RecordingVideo.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RecordingVideo({\n  setLogTimestamp,\n  setUploadTimestamp\n}) {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [videoURL, setVideoURL] = useState(null);\n  const [blobData, setBlobData] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadedVideoUrl, setUploadedVideoUrl] = useState(null);\n  const [fetchedVideoUrl, setFetchedVideoUrl] = useState(null);\n  const streamRef = useRef(null);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const timerRef = useRef(null);\n\n  // State for player timestamps\n  const [timestamps, setTimestamps] = useState([]);\n  const [timestampData, setTimestampData] = useState(null);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      streamRef.current = stream;\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.start(1000);\n      setRecording(true);\n      setTimestamps([]); // reset timestamps\n      setTimestampData(null); // reset timestamp data\n\n      setDuration(0);\n      timerRef.current = setInterval(() => {\n        setDuration(prev => prev + 1);\n      }, 1000);\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, {\n          type: \"video/webm\"\n        });\n        setVideoURL(URL.createObjectURL(blob));\n        setBlobData(blob);\n        clearInterval(timerRef.current);\n      };\n    } catch (error) {\n      console.log(`Camera access error : ${error.message}`);\n    }\n  };\n  const endRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n      var _streamRef$current;\n      mediaRecorderRef.current.stop();\n      (_streamRef$current = streamRef.current) === null || _streamRef$current === void 0 ? void 0 : _streamRef$current.getTracks().forEach(track => track.stop());\n      setRecording(false);\n      clearInterval(timerRef.current);\n    }\n  };\n  const uploadRecording = async () => {\n    if (!blobData) {\n      console.log(`no blob data!`);\n      return;\n    }\n    try {\n      setUploading(true);\n      const formData = new FormData();\n      formData.append('video', blobData, 'recording.webm');\n      console.log(\"Uploading file of size:\", blobData.size);\n      const response = await fetch(\"http://localhost:8000/upload-video\", {\n        method: \"POST\",\n        body: formData\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || data.details || `Server error: ${response.status}`);\n      }\n      setUploadedVideoUrl(data.fileUrl);\n      await postUrl(\"Name of Video\", data.fileUrl);\n      alert(\"Video uploaded successfully!\");\n    } catch (error) {\n      console.error(\"Error during upload:\", error);\n      console.log(error.message);\n    } finally {\n      setUploading(false);\n    }\n  };\n  const getVideo = async () => {\n    if (!uploadedVideoUrl) {\n      alert(\"No uploaded video URL yet. Upload first!\");\n      return;\n    }\n    try {\n      const fileKey = uploadedVideoUrl.split(\"?\")[0].split(\"/\").pop();\n      console.log(\"Fetching video for fileKey:\", fileKey);\n      const response = await fetch(`http://localhost:8000/get-video-url/${fileKey}`);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || `Server error: ${response.status}`);\n      }\n      console.log(\"Got presigned URL:\", data.fileUrl);\n      setFetchedVideoUrl(data.fileUrl);\n    } catch (error) {\n      console.error(\"Error fetching video URL:\", error);\n    }\n  };\n\n  // POST Url to Database\n  const postUrl = async (name, url) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/api/create-a-page\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name,\n          url\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      console.log(\"Url is posted to DB successfully\");\n    } catch (error) {\n      console.error(\"Error posting url to DB:\", error.message);\n    }\n  };\n  const logTimestamp = useCallback(playerId => {\n    if (recording) {\n      const newTimestamp = {\n        id: playerId,\n        timestamp: duration\n      };\n      setTimestamps(prev => [...prev, newTimestamp]);\n      console.log(`Timestamp: ${duration}s for player ${playerId}`);\n    }\n  }, [recording, duration]);\n\n  // Upload all collected timestamps\n  const uploadTimestamp = useCallback(() => {\n    if (timestamps.length === 0) {\n      console.warn(\"No timestamps to upload!\");\n      return;\n    }\n    const jsonData = {\n      video_name: \"Recording\",\n      duration: duration,\n      timestamps: timestamps\n    };\n    setTimestampData(jsonData);\n    console.log(\"Uploaded Timestamps:\", jsonData);\n  }, [timestamps, duration]);\n\n  // Set the external functions when they change\n  useEffect(() => {\n    if (setLogTimestamp) {\n      setLogTimestamp(logTimestamp);\n    }\n    if (setUploadTimestamp) {\n      setUploadTimestamp(uploadTimestamp);\n    }\n  }, [setLogTimestamp, setUploadTimestamp, logTimestamp, uploadTimestamp]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: endRecording,\n      disabled: !recording,\n      children: \"End Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadRecording,\n      disabled: !videoURL || uploading,\n      children: uploading ? \"Uploading...\" : \"Upload Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getVideo,\n      disabled: !uploadedVideoUrl,\n      children: \"Get Uploaded Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this), recording ? `${duration}s` : \"\", /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Timestamps:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this), timestamps.map((time, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Player ID: \", time.id, \", Time: \", time.timestamp, \"s\"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }, this)), timestampData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Timestamp Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(timestampData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }, this), blobData ? `size: ${blobData.size} bytes` : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"liveVideo\",\n        ref: videoRef,\n        style: {\n          display: videoURL && !recording ? 'none' : 'block'\n        },\n        autoPlay: true,\n        playsInline: true,\n        muted: true,\n        width: \"100%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), videoURL && !recording && /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"playbackVideo\",\n        src: videoURL,\n        controls: true,\n        width: \"100%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }, this), fetchedVideoUrl && /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"fetchedVideo\",\n        src: fetchedVideoUrl,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 9\n  }, this);\n}\n_s(RecordingVideo, \"GTNELD4r+cnSKw4LY8dw5dAzWBw=\");\n_c = RecordingVideo;\nvar _c;\n$RefreshReg$(_c, \"RecordingVideo\");","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","RecordingVideo","setLogTimestamp","setUploadTimestamp","_s","recording","setRecording","duration","setDuration","videoURL","setVideoURL","blobData","setBlobData","uploading","setUploading","uploadedVideoUrl","setUploadedVideoUrl","fetchedVideoUrl","setFetchedVideoUrl","streamRef","videoRef","mediaRecorderRef","chunksRef","timerRef","timestamps","setTimestamps","timestampData","setTimestampData","startRecording","stream","navigator","mediaDevices","getUserMedia","video","audio","current","srcObject","mediaRecorder","MediaRecorder","ondataavailable","event","data","size","push","start","setInterval","prev","onstop","blob","Blob","type","URL","createObjectURL","clearInterval","error","console","log","message","endRecording","state","_streamRef$current","stop","getTracks","forEach","track","uploadRecording","formData","FormData","append","response","fetch","method","body","json","ok","Error","details","status","fileUrl","postUrl","alert","getVideo","fileKey","split","pop","name","url","headers","JSON","stringify","logTimestamp","playerId","newTimestamp","id","timestamp","uploadTimestamp","length","warn","jsonData","video_name","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","disabled","map","time","index","className","ref","style","display","autoPlay","playsInline","muted","width","src","controls","_c","$RefreshReg$"],"sources":["/Users/yujinyi/Desktop/basket-stats-app/frontend/src/components/RecordingVideo.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\"\n\nexport default function RecordingVideo({ setLogTimestamp, setUploadTimestamp }) {\n    const [recording, setRecording] = useState(false);\n    const [duration, setDuration] = useState(0);\n\n    const [videoURL, setVideoURL] = useState(null);\n    const [blobData, setBlobData] = useState(null);\n\n    const [uploading, setUploading] = useState(false);\n    const [uploadedVideoUrl, setUploadedVideoUrl] = useState(null);\n\n    const [fetchedVideoUrl, setFetchedVideoUrl] = useState(null);\n\n    const streamRef = useRef(null);\n    const videoRef = useRef(null);\n    const mediaRecorderRef = useRef(null);\n    const chunksRef = useRef([]);\n    const timerRef = useRef(null);\n\n    // State for player timestamps\n    const [timestamps, setTimestamps] = useState([]);\n    const [timestampData, setTimestampData] = useState(null);\n\n    const startRecording = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ \n                video: true,\n                audio: true\n            });\n\n            streamRef.current = stream;\n\n            if (videoRef.current) {\n                videoRef.current.srcObject = stream;\n            }\n\n            const mediaRecorder = new MediaRecorder(stream);\n            \n            mediaRecorderRef.current = mediaRecorder;\n            chunksRef.current = [];\n\n            mediaRecorder.ondataavailable = (event) => {\n                if (event.data.size > 0) {\n                    chunksRef.current.push(event.data);\n                }\n            };\n\n            mediaRecorder.start(1000);\n            setRecording(true);\n            setTimestamps([]); // reset timestamps\n            setTimestampData(null); // reset timestamp data\n\n            setDuration(0);\n            timerRef.current = setInterval(() => {\n                setDuration((prev) => prev + 1);\n            }, 1000);\n\n            mediaRecorder.onstop = () => {\n                const blob = new Blob(chunksRef.current, { type: \"video/webm\" });\n                setVideoURL(URL.createObjectURL(blob));\n                setBlobData(blob);\n                clearInterval(timerRef.current);\n            };\n        } catch (error) {\n            console.log(`Camera access error : ${error.message}`);\n        }\n    }\n\n    const endRecording = () => {\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n            mediaRecorderRef.current.stop();\n            streamRef.current?.getTracks().forEach((track) => track.stop());\n\n            setRecording(false);\n            clearInterval(timerRef.current);\n        }\n    }\n\n    const uploadRecording = async () => {\n        if (!blobData) {\n            console.log(`no blob data!`);\n            return;\n        }\n    \n        try {\n            setUploading(true);\n\n            const formData = new FormData();\n            formData.append('video', blobData, 'recording.webm');\n            \n            console.log(\"Uploading file of size:\", blobData.size);\n        \n            const response = await fetch(\"http://localhost:8000/upload-video\", {\n                method: \"POST\",\n                body: formData,\n            });\n    \n            const data = await response.json();\n            \n            if (!response.ok) {\n                throw new Error(data.error || data.details || `Server error: ${response.status}`);\n            }\n    \n            setUploadedVideoUrl(data.fileUrl);\n\n            await postUrl(\"Name of Video\", data.fileUrl);\n\n            alert(\"Video uploaded successfully!\");\n        } catch (error) {\n            console.error(\"Error during upload:\", error);\n            console.log(error.message);\n        } finally {\n            setUploading(false);\n        }\n    };\n\n    const getVideo = async () => {\n        if (!uploadedVideoUrl) {\n            alert(\"No uploaded video URL yet. Upload first!\");\n            return;\n        }\n    \n        try {\n            const fileKey = uploadedVideoUrl.split(\"?\")[0].split(\"/\").pop();\n            console.log(\"Fetching video for fileKey:\", fileKey);\n    \n            const response = await fetch(`http://localhost:8000/get-video-url/${fileKey}`);\n            \n            const data = await response.json();\n    \n            if (!response.ok) {\n                throw new Error(data.error || `Server error: ${response.status}`);\n            }\n    \n            console.log(\"Got presigned URL:\", data.fileUrl);\n    \n            setFetchedVideoUrl(data.fileUrl);\n        } catch (error) {\n            console.error(\"Error fetching video URL:\", error);\n        }\n    };\n\n    // POST Url to Database\n    const postUrl = async (name, url) => {\n        try {\n            const response = await fetch(\"http://localhost:8000/api/create-a-page\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    name,\n                    url\n                }),\n            });\n    \n            if (!response.ok) {\n                throw new Error(\"Network response was not ok\");\n            }\n    \n            console.log(\"Url is posted to DB successfully\");\n        } catch (error) {\n            console.error(\"Error posting url to DB:\", error.message);\n        }\n    };\n\n    const logTimestamp = useCallback((playerId) => {\n      if (recording) {\n          const newTimestamp = {\n              id: playerId,\n              timestamp: duration\n          };\n          \n          setTimestamps(prev => [...prev, newTimestamp]);\n          console.log(`Timestamp: ${duration}s for player ${playerId}`);\n      }\n  }, [recording, duration]);\n\n    // Upload all collected timestamps\n    const uploadTimestamp = useCallback(() => {\n        if (timestamps.length === 0) {\n            console.warn(\"No timestamps to upload!\");\n            return;\n        }\n\n        const jsonData = {\n            video_name: \"Recording\",\n            duration: duration,\n            timestamps: timestamps\n        };\n\n        setTimestampData(jsonData);\n        console.log(\"Uploaded Timestamps:\", jsonData);\n    }, [timestamps, duration]);\n    \n    // Set the external functions when they change\n    useEffect(() => {\n        if (setLogTimestamp) {\n            setLogTimestamp(logTimestamp);\n        }\n        if (setUploadTimestamp) {\n            setUploadTimestamp(uploadTimestamp);\n        }\n    }, [setLogTimestamp, setUploadTimestamp, logTimestamp, uploadTimestamp]);\n\n    return(\n        <div>\n            <button onClick={startRecording}>Start Recording</button>\n            <button onClick={endRecording} disabled={!recording}>End Recording</button>\n            <button onClick={uploadRecording} disabled={!videoURL || uploading}>\n                {uploading ? \"Uploading...\" : \"Upload Video\"}\n            </button>\n            <button onClick={getVideo} disabled={!uploadedVideoUrl}>Get Uploaded Video</button>\n\n            {recording ? `${duration}s` : \"\"}\n\n            <h3>Timestamps:</h3>\n            {timestamps.map((time, index) => (\n                <p key={index}>Player ID: {time.id}, Time: {time.timestamp}s</p>\n            ))}\n\n            {timestampData && (\n                <div>\n                    <h3>Timestamp Data:</h3>\n                    <pre>{JSON.stringify(timestampData, null, 2)}</pre>\n                </div>\n            )}\n\n            {blobData ? `size: ${blobData.size} bytes` : \"\"}\n\n            <div>\n                {/* LIVE VIDEO */}\n                <video \n                    className=\"liveVideo\" \n                    ref={videoRef}  \n                    style={{ display: videoURL && !recording ? 'none' : 'block' }}  \n                    autoPlay \n                    playsInline \n                    muted \n                    width=\"100%\"\n                />\n\n                {/* PLAYER VIDEO */}\n                {videoURL && !recording && (\n                    <video className=\"playbackVideo\" src={videoURL} controls width=\"100%\" />\n                )}\n\n                {/* FETCHED VIDEO FROM SERVER */}\n                {fetchedVideoUrl && (\n                    <video className=\"fetchedVideo\" src={fetchedVideoUrl} controls />\n                )}\n            </div>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}