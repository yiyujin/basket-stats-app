{"ast":null,"code":"var _jsxFileName = \"/Users/yujinyi/Desktop/basket-stats-app/frontend/src/components/VideoRecorder.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoRecorder = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [videoURL, setVideoURL] = useState(null);\n  const [blobData, setBlobData] = useState(null);\n  const [duration, setDuration] = useState(0);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const chunksRef = useRef([]);\n  const timerRef = useRef(null);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      streamRef.current = stream;\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, {\n          type: \"video/webm\"\n        });\n        setVideoURL(URL.createObjectURL(blob));\n        setBlobData(blob); // Store blob for upload\n        clearInterval(timerRef.current);\n        setDuration(0);\n      };\n      mediaRecorder.start();\n      setRecording(true);\n\n      // Start Timer\n      setDuration(0);\n      timerRef.current = setInterval(() => {\n        setDuration(prev => prev + 1);\n      }, 1000);\n    } catch (error) {\n      console.error(\"Error accessing media devices:\", error);\n    }\n  };\n  const stopRecording = () => {\n    var _mediaRecorderRef$cur, _streamRef$current;\n    (_mediaRecorderRef$cur = mediaRecorderRef.current) === null || _mediaRecorderRef$cur === void 0 ? void 0 : _mediaRecorderRef$cur.stop();\n    (_streamRef$current = streamRef.current) === null || _streamRef$current === void 0 ? void 0 : _streamRef$current.getTracks().forEach(track => track.stop());\n    setRecording(false);\n    clearInterval(timerRef.current);\n  };\n  const uploadToServer = async () => {\n    if (!blobData) {\n      alert(\"No video recorded yet!\");\n      return;\n    }\n    const fileName = `video-${Date.now()}.webm`;\n\n    // Request pre-signed URL from backend\n    const res = await fetch(\"http://localhost:8000/generate-presigned-url\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        fileName,\n        fileType: \"video/webm\"\n      })\n    });\n    const {\n      uploadURL\n    } = await res.json();\n\n    // Upload the video to S3\n    await fetch(uploadURL, {\n      method: \"PUT\",\n      body: blobData,\n      headers: {\n        \"Content-Type\": \"video/webm\"\n      }\n    });\n    alert(\"Video uploaded successfully to S3!\");\n  };\n  useEffect(() => {\n    return () => {\n      var _streamRef$current2;\n      (_streamRef$current2 = streamRef.current) === null || _streamRef$current2 === void 0 ? void 0 : _streamRef$current2.getTracks().forEach(track => track.stop());\n      clearInterval(timerRef.current);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      disabled: recording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      disabled: !recording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadToServer,\n      disabled: !videoURL,\n      children: \"Upload to Server\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: recording ? `Recording... ${duration}s` : \"Recorded Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        autoPlay: true,\n        playsInline: true,\n        width: \"400\",\n        hidden: !!videoURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), videoURL && /*#__PURE__*/_jsxDEV(\"video\", {\n        src: videoURL,\n        controls: true,\n        width: \"400\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoRecorder, \"889kXDjkoghAcqgD23giBh62WHY=\");\n_c = VideoRecorder;\nexport default VideoRecorder;\nvar _c;\n$RefreshReg$(_c, \"VideoRecorder\");","map":{"version":3,"names":["useState","useRef","useEffect","jsxDEV","_jsxDEV","VideoRecorder","_s","recording","setRecording","videoURL","setVideoURL","blobData","setBlobData","duration","setDuration","videoRef","mediaRecorderRef","streamRef","chunksRef","timerRef","startRecording","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","mediaRecorder","MediaRecorder","ondataavailable","event","data","size","push","onstop","blob","Blob","type","URL","createObjectURL","clearInterval","start","setInterval","prev","error","console","stopRecording","_mediaRecorderRef$cur","_streamRef$current","stop","getTracks","forEach","track","uploadToServer","alert","fileName","Date","now","res","fetch","method","headers","body","JSON","stringify","fileType","uploadURL","json","_streamRef$current2","children","onClick","disabled","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","width","hidden","src","controls","_c","$RefreshReg$"],"sources":["/Users/yujinyi/Desktop/basket-stats-app/frontend/src/components/VideoRecorder.js"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\n\nconst VideoRecorder = () => {\n  const [recording, setRecording] = useState(false);\n  const [videoURL, setVideoURL] = useState(null);\n  const [blobData, setBlobData] = useState(null);\n  const [duration, setDuration] = useState(0);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const chunksRef = useRef([]);\n  const timerRef = useRef(null);\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      streamRef.current = stream;\n\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, { type: \"video/webm\" });\n        setVideoURL(URL.createObjectURL(blob));\n        setBlobData(blob); // Store blob for upload\n        clearInterval(timerRef.current);\n        setDuration(0);\n      };\n\n      mediaRecorder.start();\n      setRecording(true);\n\n      // Start Timer\n      setDuration(0);\n      timerRef.current = setInterval(() => {\n        setDuration((prev) => prev + 1);\n      }, 1000);\n    } catch (error) {\n      console.error(\"Error accessing media devices:\", error);\n    }\n  };\n\n  const stopRecording = () => {\n    mediaRecorderRef.current?.stop();\n    streamRef.current?.getTracks().forEach((track) => track.stop());\n    setRecording(false);\n    clearInterval(timerRef.current);\n  };\n\n  const uploadToServer = async () => {\n    if (!blobData) {\n      alert(\"No video recorded yet!\");\n      return;\n    }\n\n    const fileName = `video-${Date.now()}.webm`;\n\n    // Request pre-signed URL from backend\n    const res = await fetch(\"http://localhost:8000/generate-presigned-url\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ fileName, fileType: \"video/webm\" }),\n    });\n\n    const { uploadURL } = await res.json();\n\n    // Upload the video to S3\n    await fetch(uploadURL, {\n      method: \"PUT\",\n      body: blobData,\n      headers: { \"Content-Type\": \"video/webm\" },\n    });\n\n    alert(\"Video uploaded successfully to S3!\");\n  };\n\n  useEffect(() => {\n    return () => {\n      streamRef.current?.getTracks().forEach((track) => track.stop());\n      clearInterval(timerRef.current);\n    };\n  }, []);\n\n  return (\n    <div>\n      <button onClick={startRecording} disabled={recording}>\n        Start Recording\n      </button>\n      <button onClick={stopRecording} disabled={!recording}>\n        Stop Recording\n      </button>\n      <button onClick={uploadToServer} disabled={!videoURL}>\n        Upload to Server\n      </button>\n\n      <div>\n        <h3>{recording ? `Recording... ${duration}s` : \"Recorded Video\"}</h3>\n        <video ref={videoRef} autoPlay playsInline width=\"400\" hidden={!!videoURL} />\n        {videoURL && <video src={videoURL} controls width=\"400\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default VideoRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}