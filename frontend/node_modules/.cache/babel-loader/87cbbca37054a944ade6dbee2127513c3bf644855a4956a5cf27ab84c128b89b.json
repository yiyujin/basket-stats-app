{"ast":null,"code":"var _jsxFileName = \"/Users/yujinyi/Desktop/basket-stats-app/frontend/src/components/RecordingVideo.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RecordingVideo() {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [videoURL, setVideoURL] = useState(null);\n  const [blobData, setBlobData] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadedVideoUrl, setUploadedVideoUrl] = useState(null);\n  const [fetchedVideoUrl, setFetchedVideoUrl] = useState(null);\n  const streamRef = useRef(null);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const timerRef = useRef(null);\n  const [timestamps, setTimestamps] = useState([]); // ✅ State for timestamps\n  const [timestampData, setTimestampData] = useState(null); // ✅ JSON output state\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      streamRef.current = stream;\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.start(1000);\n      setRecording(true);\n      setTimestamps([]); // reset\n      setTimestampData(null); //reset\n\n      setDuration(0);\n      timerRef.current = setInterval(() => {\n        setDuration(prev => prev + 1);\n      }, 1000);\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, {\n          type: \"video/webm\"\n        });\n        setVideoURL(URL.createObjectURL(blob));\n        setBlobData(blob);\n        clearInterval(timerRef.current);\n      };\n    } catch (error) {\n      console.log(`Camera access error : ${error.message}`);\n    }\n  };\n  const endRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n      var _streamRef$current;\n      mediaRecorderRef.current.stop();\n      (_streamRef$current = streamRef.current) === null || _streamRef$current === void 0 ? void 0 : _streamRef$current.getTracks().forEach(track => track.stop());\n      setRecording(false);\n      clearInterval(timerRef.current);\n    }\n  };\n  const uploadRecording = async () => {\n    if (!blobData) {\n      console.log(`no blob data!`);\n      return;\n    }\n    try {\n      setUploading(true);\n      const formData = new FormData();\n      formData.append('video', blobData, 'recording.webm');\n      console.log(\"Uploading file of size:\", blobData.size);\n      const response = await fetch(\"http://localhost:8000/upload-video\", {\n        method: \"POST\",\n        body: formData\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || data.details || `Server error: ${response.status}`);\n      }\n      setUploadedVideoUrl(data.fileUrl);\n      await postUrl(\"Name of Video\", data.fileUrl);\n      alert(\"Video uploaded successfully!\");\n    } catch (error) {\n      console.error(\"Error during upload:\", error);\n      console.log(error.message);\n    } finally {\n      setUploading(false);\n    }\n  };\n  const getVideo = async () => {\n    if (!uploadedVideoUrl) {\n      alert(\"No uploaded video URL yet. Upload first!\");\n      return;\n    }\n    try {\n      const fileKey = uploadedVideoUrl.split(\"?\")[0].split(\"/\").pop();\n      console.log(\"Fetching video for fileKey:\", fileKey);\n      const response = await fetch(`http://localhost:8000/get-video-url/${fileKey}`);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || `Server error: ${response.status}`);\n      }\n      console.log(\"Got presigned URL:\", data.fileUrl);\n      setFetchedVideoUrl(data.fileUrl);\n    } catch (error) {\n      console.error(\"Error fetching video URL:\", error);\n    }\n  };\n\n  // POST Url to Database\n  const postUrl = async (name, url) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/api/create-a-page\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name,\n          url\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      console.log(\"Url is posted to DB successfully\");\n    } catch (error) {\n      console.error(\"Error posting url to DB:\", error.message);\n    }\n  };\n  const logTimestamp = () => {\n    if (recording) {\n      setTimestamps(prev => [...prev, duration]); // ✅ Use duration state\n      console.log(`📍 Timestamp: ${duration}s`);\n    }\n  };\n  const uploadTimestamp = () => {\n    if (timestamps.length === 0) {\n      console.warn(\"No timestamps to upload!\");\n      return;\n    }\n    const jsonData = {\n      video_name: \"Recording\",\n      duration: duration,\n      // Total duration of recording\n      timestamps: timestamps.map(time => ({\n        timestamp: time\n      })) // Convert to JSON structure\n    };\n    setTimestampData(jsonData); // ✅ Save JSON to state\n    console.log(\"jsonData:\", jsonData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: endRecording,\n      disabled: !recording,\n      children: \"End Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadRecording,\n      disabled: !videoURL || uploading,\n      children: uploading ? \"Uploading...\" : \"Upload Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getVideo,\n      disabled: !uploadedVideoUrl,\n      children: \"Get Uploaded Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => postUrl(\"Name test\", \"url test\"),\n      children: \"Upload to DB Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: logTimestamp,\n      disabled: !recording,\n      children: \"Log Timestamp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadTimestamp,\n      disabled: timestamps.length === 0,\n      children: \"Upload Timestamp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this), recording ? `${duration}s` : \"\", /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Timestamps:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), timestamps.map((time, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u23F1 \", time, \"s\"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 21\n    }, this)), blobData ? `size : ${blobData.size}bytes` : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"liveVideo\",\n        ref: videoRef,\n        style: {\n          display: videoURL && !recording ? 'none' : 'block'\n        },\n        autoPlay: true,\n        playsInline: true,\n        muted: true,\n        width: \"100%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), videoURL && !recording && /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"playbackVideo\",\n        src: videoURL,\n        controls: true,\n        width: \"100%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 46\n      }, this), fetchedVideoUrl && /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"fetchedVideo\",\n        src: fetchedVideoUrl,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 9\n  }, this);\n}\n_s(RecordingVideo, \"osdzGgj2kgObZJe+9N6BPiyngV4=\");\n_c = RecordingVideo;\nvar _c;\n$RefreshReg$(_c, \"RecordingVideo\");","map":{"version":3,"names":["useState","useEffect","useRef","jsxDEV","_jsxDEV","RecordingVideo","_s","recording","setRecording","duration","setDuration","videoURL","setVideoURL","blobData","setBlobData","uploading","setUploading","uploadedVideoUrl","setUploadedVideoUrl","fetchedVideoUrl","setFetchedVideoUrl","streamRef","videoRef","mediaRecorderRef","chunksRef","timerRef","timestamps","setTimestamps","timestampData","setTimestampData","startRecording","stream","navigator","mediaDevices","getUserMedia","video","audio","current","srcObject","mediaRecorder","MediaRecorder","ondataavailable","event","data","size","push","start","setInterval","prev","onstop","blob","Blob","type","URL","createObjectURL","clearInterval","error","console","log","message","endRecording","state","_streamRef$current","stop","getTracks","forEach","track","uploadRecording","formData","FormData","append","response","fetch","method","body","json","ok","Error","details","status","fileUrl","postUrl","alert","getVideo","fileKey","split","pop","name","url","headers","JSON","stringify","logTimestamp","uploadTimestamp","length","warn","jsonData","video_name","map","time","timestamp","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","disabled","index","className","ref","style","display","autoPlay","playsInline","muted","width","src","controls","_c","$RefreshReg$"],"sources":["/Users/yujinyi/Desktop/basket-stats-app/frontend/src/components/RecordingVideo.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\"\n\nexport default function RecordingVideo(){\n    const [recording, setRecording] = useState(false);\n    const [duration, setDuration] = useState(0);\n\n    const [videoURL, setVideoURL] = useState(null);\n    const [blobData, setBlobData] = useState(null);\n\n    const [uploading, setUploading] = useState(false);\n    const [uploadedVideoUrl, setUploadedVideoUrl] = useState(null);\n\n    const [fetchedVideoUrl, setFetchedVideoUrl] = useState(null);\n\n    const streamRef = useRef(null);\n    const videoRef = useRef(null);\n    const mediaRecorderRef = useRef(null);\n    const chunksRef = useRef([]);\n    const timerRef = useRef(null);\n\n    const [timestamps, setTimestamps] = useState([]); // ✅ State for timestamps\n    const [timestampData, setTimestampData] = useState(null); // ✅ JSON output state\n\n    const startRecording = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ \n                video: true,\n                audio: true\n              });\n\n              streamRef.current = stream;\n\n              if( videoRef.current ){\n                videoRef.current.srcObject = stream;\n              }\n\n            const mediaRecorder = new MediaRecorder(stream);\n            \n            mediaRecorderRef.current = mediaRecorder;\n            chunksRef.current = [];\n\n            mediaRecorder.ondataavailable = (event) => {\n                if (event.data.size > 0) {\n                chunksRef.current.push(event.data);\n                }\n            };\n\n            mediaRecorder.start(1000);\n            setRecording(true);\n            setTimestamps([]); // reset\n            setTimestampData(null); //reset\n\n            setDuration(0);\n            timerRef.current = setInterval(() => {\n                setDuration((prev) => prev + 1);\n            }, 1000);\n\n            mediaRecorder.onstop = () => {\n                const blob = new Blob(chunksRef.current, { type: \"video/webm\" });\n                setVideoURL(URL.createObjectURL(blob));\n                setBlobData(blob);\n                clearInterval(timerRef.current);\n            };\n        } catch (error) {\n            console.log(`Camera access error : ${error.message}`);\n        }\n    }\n\n    const endRecording = () => {\n        if ( mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\" ) {\n            mediaRecorderRef.current.stop();\n            streamRef.current?.getTracks().forEach((track) => track.stop());\n\n            setRecording(false);\n            clearInterval(timerRef.current);\n        }\n    }\n\n    const uploadRecording = async () => {\n        if ( !blobData ) {\n          console.log(`no blob data!`);\n          return;\n        }\n    \n        try {\n          setUploading(true);\n\n          const formData = new FormData();\n          formData.append('video', blobData, 'recording.webm');\n          \n          console.log(\"Uploading file of size:\", blobData.size);\n        \n          const response = await fetch(\"http://localhost:8000/upload-video\", {\n            method: \"POST\",\n            body: formData,\n          });\n    \n          const data = await response.json();\n          \n          if (!response.ok) {\n            throw new Error(data.error || data.details || `Server error: ${response.status}`);\n          }\n    \n          setUploadedVideoUrl(data.fileUrl);\n\n          await postUrl(\"Name of Video\", data.fileUrl);\n\n          alert(\"Video uploaded successfully!\");\n        } catch (error) {\n          console.error(\"Error during upload:\", error);\n          console.log(error.message);\n        } finally {\n          setUploading(false);\n        }\n    };\n\n    const getVideo = async () => {\n      if ( !uploadedVideoUrl ) {\n        alert(\"No uploaded video URL yet. Upload first!\");\n        return;\n      }\n  \n      try {\n        const fileKey = uploadedVideoUrl.split(\"?\")[0].split(\"/\").pop();\n        console.log(\"Fetching video for fileKey:\", fileKey);\n  \n        const response = await fetch(`http://localhost:8000/get-video-url/${fileKey}`);\n        \n        const data = await response.json();\n  \n        if (!response.ok) {\n          throw new Error(data.error || `Server error: ${response.status}`);\n        }\n  \n        console.log(\"Got presigned URL:\", data.fileUrl);\n  \n        setFetchedVideoUrl(data.fileUrl);\n      } catch (error) {\n        console.error(\"Error fetching video URL:\", error);\n      }\n    };\n\n    // POST Url to Database\n    const postUrl = async ( name, url ) => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/create-a-page\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n              name,\n              url\n          }),\n        });\n  \n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n  \n        console.log(\"Url is posted to DB successfully\");\n      } catch (error) {\n        console.error(\"Error posting url to DB:\", error.message);\n      }\n    };\n\n    const logTimestamp = () => {\n      if (recording) {\n          setTimestamps((prev) => [...prev, duration]); // ✅ Use duration state\n          console.log(`📍 Timestamp: ${duration}s`);\n      }\n  };\n\n  const uploadTimestamp = () => {\n    if (timestamps.length === 0) {\n        console.warn(\"No timestamps to upload!\");\n        return;\n    }\n\n    const jsonData = {\n        video_name: \"Recording\",\n        duration: duration, // Total duration of recording\n        timestamps: timestamps.map(time => ({ timestamp: time })) // Convert to JSON structure\n    };\n\n    setTimestampData(jsonData); // ✅ Save JSON to state\n    console.log(\"jsonData:\", jsonData);\n};\n\n    return(\n        <div>\n            <button onClick = { startRecording }>Start Recording</button>\n            <button onClick = { endRecording } disabled = { !recording }>End Recording</button>\n            <button onClick = { uploadRecording } disabled = { !videoURL || uploading }>{ uploading ? \"Uploading...\" : \"Upload Video\" }</button>\n            <button onClick = { getVideo } disabled = {!uploadedVideoUrl}>Get Uploaded Video</button>\n\n            <button onClick = { () => postUrl(\"Name test\", \"url test\") }>Upload to DB Test</button>\n\n            <button onClick={logTimestamp} disabled={!recording}>Log Timestamp</button>\n            <button onClick={uploadTimestamp} disabled={timestamps.length === 0}>Upload Timestamp</button>\n\n            { recording ? `${duration}s` : \"\" }\n\n            <h3>Timestamps:</h3>\n                {timestamps.map((time, index) => (\n                    <p key={index}>⏱ {time}s</p>\n                ))}\n\n            { blobData ? `size : ${blobData.size}bytes` : \"\" }\n\n            <div>\n                {/* LIVE VIDEO */}\n                <video className = \"liveVideo\" ref = { videoRef }  style = { { display: videoURL && !recording ? 'none' : 'block' } }  autoPlay playsInline muted width = \"100%\"/>\n\n                {/* PLAYER VIDEO */}\n                { videoURL && !recording &&  <video className = \"playbackVideo\" src = { videoURL } controls width = \"100%\"/> }\n\n                {/* FETCHED VIDEO FROM SERVER */}\n                { fetchedVideoUrl && <video className = \"fetchedVideo\" src = { fetchedVideoUrl } controls/> }\n            </div>\n        </div>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}